cacm-3114 : <b>in</b> order <b>to</b> display all differences <b>the</b> algorithm isolates differences <b>in</b> <b>a</b> <b>way</b> <b>that</b> corresponds closely <b>to</b> our intuitive <b>notion</b> <b>of</b> difference <b>is</b> easy <b>to</b> implement <b>and</b> <b>is</b> computationally efficient with time 
cacm-0982 : work <b>is</b> informally presented <b>and</b> <b>the</b> measurement <b>of</b> physical similarity <b>in</b> pairs <b>of</b> strings <b>is</b> discussed <b>a</b> <b>notion</b> which plays <b>a</b> central role <b>in</b> <b>the</b> proposed <b>type</b> <b>of</b> translator experimental evidence <b>is</b> presented <b>in</b> support <b>of</b> <b>the</b> premise upon which this 
cacm-3006 : <b>in</b> an increase <b>in</b> fault rate <b>two</b> paging algorithms <b>are</b> examined <b>in</b> terms <b>of</b> their anomaly potential <b>and</b> reference string examples <b>of</b> various anomalies <b>are</b> presented <b>two</b> paging algorithm properties <b>the</b> inclusion property <b>and</b> <b>the</b> generalized inclusion property <b>are</b> discussed <b>and</b> <b>the</b> anomaly implications <b>of</b> these properties presented cacm 
cacm-2369 : rotating object <b>a</b> method <b>is</b> presented <b>of</b> determining which parts <b>of</b> three-dimensional objects <b>are</b> visible <b>and</b> which <b>are</b> invisible <b>when</b> <b>the</b> objects <b>are</b> rotated about <b>some</b> axis this paper describes 
cacm-2859 : modules exect results <b>are</b> computed for <b>a</b> simple model <b>of</b> such <b>a</b> <b>system</b> <b>the</b> limiting value <b>is</b> derived for <b>the</b> relative degree <b>of</b> memory interference <b>as</b> <b>the</b> <b>system</b> size increases <b>the</b> model <b>of</b> <b>the</b> limiting behavior <b>of</b> <b>the</b> <b>system</b> yields approximate results for 
cacm-3106 : such <b>as</b> <b>a</b> stack <b>is</b> used <b>the</b> algorithm needs no mark 
cacm-3031 : using algebraic axioms <b>the</b> virtue <b>of</b> these axioms <b>is</b> <b>that</b> they permit <b>a</b> representation-independent formal specification <b>of</b> <b>a</b> <b>data</b> <b>type</b> an example <b>is</b> given which shows how 
cacm-2651 : key issue <b>is</b> providing <b>a</b> sufficient set <b>of</b> <b>data</b> <b>types</b> <b>and</b> associated operations <b>in</b> <b>a</b> manner <b>that</b> permits <b>both</b> natural problem-oriented notation <b>and</b> efficient implementation <b>the</b> el1 language contains <b>a</b> number <b>of</b> features specifically designed <b>to</b> simultaneously satisfy <b>both</b> requirements <b>the</b> resulting treatment <b>of</b> <b>data</b> <b>types</b> includes provision for programmer-defined 
cacm-1003 : <b>the</b> program <b>is</b> based on <b>a</b> direct statement <b>of</b> fouriers law <b>of</b> heat conduction <b>and</b> <b>the</b> chemical rate equation <b>to</b> provide <b>a</b> bookkeeping law <b>to</b> follow <b>the</b> reactants <b>and</b> <b>the</b> flow <b>of</b> heat packets <b>in</b> such <b>a</b> <b>way</b> <b>that</b> <b>the</b> computer continually stores <b>the</b> heat distribution <b>a</b> computer analysis method <b>is</b> here regarded <b>as</b> one <b>in</b> which <b>the</b> physical laws <b>of</b> <b>a</b> process <b>are</b> used explicitly <b>in</b> <b>the</b> program usually this results 
cacm-2560 : <b>a</b> queuing model <b>of</b> <b>a</b> multiprogrammed computer with <b>a</b> two-level storage <b>system</b> <b>the</b> results <b>are</b> presented <b>of</b> an analysis <b>of</b> <b>a</b> probabilistic model <b>of</b> <b>a</b> multiprogrammed computer <b>system</b> with <b>a</b> two-level storage <b>system</b> <b>in</b> which <b>there</b> <b>is</b> sequential dependency <b>of</b> accesses <b>between</b> <b>the</b> devices expressions <b>are</b> obtained for <b>the</b> long-run probability <b>that</b> <b>both</b> <b>the</b> cpu <b>and</b> each <b>of</b> <b>the</b> storage devices <b>are</b> busy <b>some</b> numerical results <b>are</b> given which quantify <b>the</b> gains <b>in</b> cpu utilization obtainable by 
cacm-2912 : time can modify <b>the</b> <b>data</b> but concurrent reading <b>and</b> writing <b>is</b> permitted <b>two</b> general theorems <b>are</b> proved <b>and</b> <b>some</b> algorithms <b>are</b> presented <b>to</b> illustrate their use these 
cacm-2002 : amesplot-a higher level <b>data</b> plotting software <b>system</b> amesplot <b>is</b> an extensible software <b>system</b> designed <b>to</b> make <b>the</b> display <b>of</b> <b>data</b> <b>as</b> simple painless <b>and</b> neat <b>as</b> possible <b>the</b> <b>system</b> described <b>is</b> hardware-independent <b>and</b> has been implemented on 
cacm-1856 : large increment <b>in</b> tlcs effective knowledge <b>of</b> <b>the</b> world <b>and</b> <b>in</b> its overall ability <b>to</b> comprehend text <b>the</b> programs strategy <b>is</b> presented <b>as</b> <b>a</b> general theory <b>of</b> language comprehension cacm august,1969 
cacm-3103 : overview <b>the</b> use <b>of</b> several levels <b>of</b> abstraction has proved <b>to</b> be very helpful <b>in</b> constructing <b>and</b> maintaining programs <b>when</b> programs <b>are</b> designed with abstract <b>data</b> <b>types</b> such <b>as</b> sets <b>and</b> lists programmer time can 
cacm-1847 : above by 3 <b>and</b> it <b>is</b> shown <b>that</b> <b>both</b> bounds <b>are</b> attained <b>in</b> terms <b>of</b> storage our algorithm <b>is</b> similar <b>to</b> <b>that</b> <b>of</b> gotlieb <b>and</b> corneil <b>and</b> superior <b>to</b> <b>that</b> <b>of</b> welch <b>in</b> terms <b>of</b> speed it <b>is</b> similar <b>to</b> <b>that</b> <b>of</b> welch <b>and</b> superior <b>to</b> <b>that</b> <b>of</b> gotlieb <b>and</b> corneil testsshow our algorithm 
cacm-2233 : match <b>the</b> letters <b>of</b> <b>the</b> clear text or <b>message</b> <b>the</b> sequence <b>of</b> numbers corresponding <b>to</b> these matches <b>is</b> then written down <b>as</b> <b>the</b> final code while primitive 
cacm-2941 : <b>types</b> <b>and</b> <b>type</b> coercions <b>the</b> benefits <b>of</b> <b>the</b> <b>type</b> <b>system</b> <b>and</b> why it <b>is</b> breached occasionally <b>and</b> <b>the</b> difficulty <b>of</b> making <b>the</b> treatment <b>of</b> variant records safe cacm 
cacm-1748 : past four years <b>to</b> provide <b>a</b> suitable framework for <b>the</b> design <b>and</b> analysis <b>of</b> multiprocessing systems <b>the</b> notions <b>of</b> process <b>and</b> state vector <b>are</b> discussed <b>and</b> <b>the</b> nature <b>of</b> basic operations on <b>processes</b> <b>is</b> considered <b>some</b> <b>of</b> <b>the</b> connections <b>between</b> <b>processes</b> <b>and</b> protection <b>are</b> analyzed <b>a</b> very general approach <b>to</b> priority-oriented scheduling <b>is</b> described <b>and</b> its <b>relationship</b> <b>to</b> conventional interrupt systems <b>is</b> explained <b>some</b> aspects <b>of</b> time-oriented scheduling <b>are</b> considered <b>the</b> implementation <b>of</b> <b>the</b> scheduling mechanism <b>is</b> analyzed <b>in</b> detail <b>and</b> <b>the</b> feasibility <b>of</b> embodying it <b>in</b> hardware established finally several 
cacm-2937 : an experiment <b>that</b> compares <b>the</b> programming reliability <b>of</b> subjects using <b>a</b> statically typed language <b>and</b> <b>a</b> typeless language analysis <b>of</b> <b>the</b> number <b>of</b> errors <b>and</b> <b>the</b> number <b>of</b> runs containing errors shows 
cacm-1892 : degree <b>of</b> multiprogramming <b>in</b> page-on-demand systems <b>a</b> simple stochastic model <b>is</b> described which offers <b>a</b> base for understanding <b>the</b> <b>relationship</b> <b>between</b> <b>the</b> number <b>of</b> programs permitted <b>to</b> share memory <b>the</b> degree <b>of</b> multiprogramming drum traffic rates 
cacm-2083 : creation <b>and</b> control <b>of</b> internal <b>data</b> bases under <b>a</b> fortran programming environment <b>a</b> method <b>is</b> described for <b>the</b> definition <b>of</b> <b>a</b> users common structure <b>and</b> <b>the</b> automatic generation <b>of</b> <b>the</b> necessary common dimension equivalence 
cacm-2177 : <b>both</b> bounds <b>are</b> attained values <b>of</b> g <b>are</b> derived for each <b>of</b> several suitable families <b>of</b> test graphs generated by 
cacm-2888 : action <b>the</b> principles <b>of</b> methodical coding <b>are</b> discussed <b>and</b> <b>the</b> <b>way</b> <b>in</b> which logical connections <b>between</b> <b>data</b> items must be reflected 
cacm-1543 : <b>the</b> formulation <b>of</b> certain <b>types</b> <b>of</b> computer problems by <b>the</b> use <b>of</b> tensor calculus <b>and</b> <b>a</b> computer language designed <b>to</b> facilitate symbolic mathematical computation 
cacm-2835 : discussed <b>and</b> <b>a</b> modification <b>of</b> <b>the</b> algorithm <b>is</b> given <b>to</b> further improve optimization this 
cacm-2060 : <b>the</b> following characteristics 1 <b>any</b> value which <b>is</b> permitted <b>in</b> <b>some</b> context <b>of</b> <b>the</b> language <b>is</b> permissible <b>in</b> <b>any</b> other meaningful context <b>in</b> <b>particular</b> functions <b>and</b> labels <b>are</b> permissible results <b>of</b> functions <b>and</b> values <b>of</b> variables 2 assignment <b>and</b> indirect addressing <b>are</b> formalized by introducing values 
cacm-2051 : words <b>is</b> then assigned <b>a</b> relative value <b>that</b> <b>is</b> <b>a</b> function <b>of</b> <b>the</b> total frequency <b>in</b> <b>the</b> <b>data</b> <b>of</b> each correspondence found <b>in</b> <b>that</b> pair <b>of</b> words <b>the</b> output <b>is</b> <b>a</b> list <b>of</b> all correspondence <b>types</b> with their frequency <b>of</b> occurrence <b>in</b> <b>the</b> <b>data</b> <b>and</b> <b>a</b> separate listing <b>of</b> each correspondence with all 
cacm-0243 : correcting multiple errors <b>the</b> paper introduces <b>a</b> new family <b>of</b> codes for detecting <b>and</b> correcting multiple errors <b>in</b> <b>a</b> binary-coded <b>message</b> <b>the</b> <b>message</b> itself <b>is</b> arranged conceptually into <b>a</b> multidimensional rectangular array <b>the</b> <b>processes</b> <b>of</b> encoding <b>and</b> error detection <b>are</b> based upon parity evaluations 
cacm-2931 : explain <b>what</b> <b>are</b> <b>the</b> objects <b>of</b> computation <b>in</b> <b>a</b> <b>way</b> <b>the</b> statics <b>of</b> <b>the</b> problem <b>and</b> how they <b>are</b> <b>to</b> be transformed <b>the</b> dynamics so far <b>the</b> theories <b>of</b> automata <b>and</b> <b>of</b> nets though most <b>in</b> teresting for dynamics have 
cacm-1482 : used for many <b>types</b> <b>of</b> applications <b>in</b> <b>particular</b> <b>the</b> authors have used <b>the</b> <b>system</b> for <b>the</b> analysis <b>of</b> linear graphs <b>the</b> main concept <b>of</b> <b>the</b> <b>system</b> <b>is</b> <b>the</b> use <b>of</b> <b>a</b> collection <b>of</b> programmable pointers which <b>are</b> visualized <b>as</b> <b>a</b> family <b>of</b> bugs cacm february 1966 
cacm-2451 : <b>to</b> determine which records <b>in</b> <b>a</b> <b>data</b> collection satisfy <b>a</b> given query expressed <b>in</b> terms <b>of</b> <b>data</b> values <b>the</b> process <b>of</b> locating <b>the</b> desired responses can be 
cacm-0867 : <b>types</b> <b>of</b> subareas <b>of</b> <b>the</b> xy-space <b>the</b> first model considers <b>a</b> rectangular area with <b>the</b> constraint <b>that</b> <b>the</b> plane segments <b>are</b> defined over <b>a</b> grid <b>in</b> <b>the</b> xy-space it <b>is</b> then shown how this 
cacm-2958 : specification <b>of</b> abstract <b>data</b> <b>types</b> among <b>the</b> examples presented <b>is</b> <b>a</b> top-down development <b>of</b> <b>a</b> symbol table for <b>a</b> block structured language <b>a</b> discussion <b>of</b> <b>the</b> proof <b>of</b> its correctness <b>is</b> given <b>the</b> paper also contains <b>a</b> brief discussion <b>of</b> <b>the</b> problems involved <b>in</b> constructing algebraic specifications <b>that</b> <b>are</b> <b>both</b> consistent <b>and</b> complete cacm june 1977 
cacm-2053 : on <b>the</b> conversion <b>of</b> decision tables <b>to</b> computer programs <b>the</b> use <b>of</b> execution time diagnostics <b>in</b> pinpointing ambiguities <b>in</b> decision tables <b>is</b> discussed it <b>is</b> pointed out <b>that</b> <b>any</b> <b>attempt</b> at resolving ambiguities at 
cacm-1135 : it stresses <b>the</b> structural analysis <b>of</b> <b>the</b> class <b>of</b> <b>processes</b> <b>to</b> be represented <b>in</b> <b>the</b> languages <b>as</b> opposed <b>to</b> emphasizing formal ie contents-independent 
cacm-3015 : 0 <b>and</b> 2 generates <b>a</b> sequence <b>of</b> vectors which converges <b>to</b> <b>a</b> solution under <b>the</b> same assumptions for <b>a</b> <b>system</b> <b>of</b> linear equations <b>the</b> relaxation method converges <b>to</b> <b>the</b> minimum norm solution previously 
cacm-3142 : <b>to</b> be difficult <b>and</b> not always successful <b>there</b> appears <b>to</b> be <b>some</b> conflict <b>between</b> computer-using organizations <b>and</b> their public also <b>the</b> role <b>of</b> poor man agement packages 
cacm-2867 : <b>the</b> design philosophy used <b>in</b> <b>the</b> construction <b>of</b> <b>a</b> family <b>of</b> operating systems it <b>is</b> shown <b>that</b> <b>the</b> concepts <b>of</b> module <b>and</b> level do not coincide 
cacm-1828 : <b>synchronization</b> <b>in</b> <b>a</b> parallel-accessed <b>data</b> base <b>the</b> following problem <b>is</b> considered given <b>a</b> <b>data</b> base which can be 
cacm-2229 : <b>are</b> basically <b>two</b> approaches <b>the</b> binomial theorem <b>and</b> <b>the</b> iteration methods <b>both</b> methods <b>are</b> described here <b>and</b> <b>the</b> <b>relationship</b> <b>between</b> them <b>is</b> pointed out <b>some</b> well-known classical formulas <b>are</b> obtained <b>as</b> <b>particular</b> cases <b>and</b> it <b>is</b> shown how <b>the</b> convergence properties <b>of</b> these formulas can be 
cacm-2920 : needs by <b>a</b> flowchart <b>of</b> need-defined steps <b>a</b> global approach <b>to</b> <b>the</b> phenomenon <b>and</b> its <b>in</b> terpretation <b>as</b> <b>a</b> game <b>between</b> <b>the</b> operating <b>system</b> <b>and</b> <b>the</b> <b>processes</b> allows formalization <b>of</b> risk <b>and</b> safety concepts <b>the</b> bipartite graph representation <b>of</b> this game may then 
cacm-2794 : <b>the</b> set <b>of</b> clauses <b>is</b> interpreted <b>in</b> <b>the</b> state-spacer mode or <b>in</b> <b>the</b> problem-reduction mode <b>is</b> presented <b>the</b> analogous concepts <b>in</b> problem-reduction <b>and</b> theorem proving <b>and</b> <b>the</b> terminology used <b>to</b> refer <b>to</b> them <b>are</b> noted <b>the</b> <b>relationship</b> <b>between</b> problem-reduction input resolution <b>and</b> linear resolution <b>is</b> discussed cacm february 1975 
cacm-2376 : prove <b>that</b> concurrently running <b>processes</b> <b>of</b> <b>a</b> <b>system</b> communicate correctly this <b>is</b> demonstrated for <b>a</b> <b>system</b> consisting <b>of</b> many sending <b>processes</b> which deposit messages <b>in</b> <b>a</b> buffer <b>and</b> many receiving <b>processes</b> which remove messages from 
cacm-2003 : <b>the</b> design process <b>are</b> presented <b>the</b> main emphasis <b>is</b> given <b>to</b> <b>the</b> description <b>of</b> <b>the</b> features <b>of</b> <b>the</b> <b>two</b> high level user oriented 
cacm-2940 : abstraction <b>and</b> verification <b>in</b> alphard defining <b>and</b> specifying iteration <b>and</b> generators <b>the</b> alphard form provides <b>the</b> programmer with <b>a</b> great deal <b>of</b> control over <b>the</b> implementation <b>of</b> abstract <b>data</b> <b>types</b> <b>in</b> this paper <b>the</b> abstraction techniques <b>are</b> extended from simple <b>data</b> representation <b>and</b> function definition <b>to</b> <b>the</b> iteration statement <b>the</b> most important poin t 
cacm-2341 : be printed concatenated <b>in</b> <b>any</b> <b>of</b> three dimensions <b>and</b> merged on <b>the</b> basis <b>of</b> program-defined connection points <b>some</b> blocks adapt <b>in</b> size <b>and</b> shape <b>to</b> their environment blocks <b>and</b> their operations <b>are</b> mainly used for composing 
cacm-1098 : same speed finally <b>the</b> authors give <b>some</b> heuristics <b>to</b> aid <b>in</b> <b>the</b> selection <b>of</b> one <b>of</b> these languages for use 
cacm-2470 : be introduced into <b>the</b> <b>system</b> <b>the</b> technique <b>is</b> contrasted with <b>the</b> use <b>of</b> <b>the</b> paradoxical combinator y <b>the</b> questions <b>of</b> local <b>and</b> global environments <b>and</b> <b>of</b> various modes <b>of</b> function calling <b>and</b> parameter passing <b>are</b> touched upon <b>the</b> theory <b>is</b> applied <b>to</b> <b>the</b> proof <b>of</b> several elementary theorems concerning 
cacm-1625 : programs written <b>in</b> an algol-like language <b>are</b> discussed <b>the</b> simplifications <b>are</b> based on <b>the</b> form <b>of</b> <b>the</b> program <b>and</b> <b>the</b> knowledge obtained by <b>a</b> processor without <b>any</b> understanding <b>of</b> <b>what</b> <b>the</b> program <b>is</b> supposed <b>to</b> do these methods have 
cacm-1908 : nonprogrammers <b>are</b> using <b>the</b> computer <b>as</b> an aid <b>in</b> decision-making <b>and</b> problem-solving rather than <b>as</b> <b>a</b> programming end <b>in</b> itself statistically <b>and</b> logically significant results indicate 
cacm-2265 : isolate <b>the</b> <b>notion</b> <b>of</b> <b>type</b> checking <b>and</b> presents <b>a</b> partial solution <b>to</b> <b>the</b> <b>type</b> checking problem based on 
cacm-2321 : be given <b>to</b> problems <b>of</b> coordination <b>synchronization</b> error control signaling <b>stream</b> multiplexing <b>and</b> switch control <b>in</b> addition <b>to</b> minimizing <b>the</b> technological interdependence <b>of</b> specific subsystem designs <b>a</b> focus on <b>some</b> <b>of</b> <b>the</b> problems <b>is</b> obtained <b>in</b> <b>a</b> discussion <b>of</b> <b>a</b> detailed specification for <b>a</b> <b>particular</b> computer-communications <b>system</b> interface cacm july 1972 
cacm-3021 : modp-1 q-1 <b>the</b> security <b>of</b> <b>the</b> <b>system</b> rests <b>in</b> part on <b>the</b> difficulty <b>of</b> factoring <b>the</b> published divisor n cacm 
cacm-3002 : <b>of</b> <b>the</b> subrecords <b>is</b> designated <b>as</b> <b>the</b> primary record <b>when</b> <b>a</b> request for <b>a</b> record <b>is</b> made <b>the</b> primary record <b>is</b> first accessed <b>and</b> other subrecords <b>are</b> accessed only if <b>the</b> pertinent information <b>is</b> not stored <b>in</b> <b>the</b> primary record <b>the</b> model <b>that</b> <b>is</b> presented <b>in</b> this paper <b>both</b> <b>as</b> <b>a</b> nonlinear programming model <b>and</b> <b>a</b> mixed integer programming model 
cacm-3138 : signs <b>of</b> various controlling parameters <b>in</b> <b>the</b> revised simplex algorithm <b>are</b> mentioned <b>a</b> simple means <b>of</b> constructing test cases <b>and</b> <b>some</b> sample computing times <b>are</b> presented cacm april 1979 
cacm-1474 : roundoff errors <b>in</b> <b>any</b> prolonged computation it <b>is</b> generally assumed <b>that</b> <b>the</b> accumulated effect <b>of</b> roundoff errors <b>is</b> <b>in</b> <b>some</b> sense statistical <b>the</b> purpose <b>of</b> this paper <b>is</b> <b>to</b> give precise descriptions <b>of</b> certain probabilistic models for 
cacm-3105 : <b>to</b> simple objects <b>and</b> <b>to</b> objects <b>that</b> <b>are</b> components <b>of</b> larger objects such <b>as</b> bank account records <b>in</b> <b>a</b> banks <b>data</b> base <b>the</b> constraints <b>are</b> stated declaratively <b>and</b> can be enforced by 
cacm-1162 : provide <b>a</b> one-for-one translation from <b>a</b> symbolic <b>to</b> <b>a</b> numeric version <b>of</b> <b>a</b> program <b>that</b> <b>is</b> from assembly language <b>to</b> machine language <b>the</b> meta-language presented here can 
cacm-2194 : presented for minimizing <b>the</b> sum <b>of</b> <b>the</b> lengths <b>of</b> <b>the</b> blocks <b>of</b> coding produced by an 
cacm-3199 : <b>the</b> assignment <b>of</b> <b>types</b> <b>to</b> all expressions <b>and</b> <b>the</b> use <b>of</b> <b>a</b> standard ordering procedure cacm 
cacm-2939 : an <b>in</b> troduction <b>to</b> <b>the</b> abstraction mechanisms <b>in</b> clu by means <b>of</b> programming examples <b>the</b> utility <b>of</b> <b>the</b> three kinds <b>of</b> abstractions <b>in</b> program construction <b>is</b> illustrated <b>and</b> it <b>is</b> shown how clu programs 
cacm-1637 : <b>in</b> measuring stability analogies <b>between</b> autocorrelated <b>data</b> <b>and</b> independent observations <b>are</b> described <b>a</b> <b>way</b> <b>to</b> test <b>the</b> difference <b>of</b> <b>the</b> mean <b>of</b> <b>two</b> experiments <b>is</b> suggested it <b>is</b> shown how <b>the</b> variance <b>of</b> <b>the</b> sample mean relates <b>to</b> <b>the</b> spectrum <b>of</b> <b>the</b> generating process <b>and</b> estimation <b>of</b> <b>the</b> quantities <b>of</b> interest <b>is</b> described <b>the</b> results expand <b>the</b> possibilities <b>of</b> statistical spectral analysis <b>as</b> applied <b>to</b> simulation experiments cacm february 
cacm-1626 : <b>to</b> contain all <b>the</b> <b>data</b> <b>and</b> programs described <b>in</b> this paper <b>are</b> <b>a</b> number <b>of</b> techniques <b>that</b> have been used <b>to</b> build <b>a</b> lisp <b>system</b> utilizing <b>a</b> drum for its principal 
cacm-1398 : robot <b>data</b> screening <b>a</b> solution <b>to</b> multivariate <b>type</b> problems <b>in</b> <b>the</b> biological <b>and</b> social sciences <b>a</b> new approach <b>is</b> outlined toward <b>the</b> solution <b>of</b> <b>the</b> <b>type</b> <b>of</b> multivariate problem <b>that</b> <b>is</b> found usually <b>in</b> <b>the</b> biological <b>and</b> social sciences <b>as</b> well <b>as</b> <b>in</b> medicine this approach uses 
cacm-2749 : trade-off <b>in</b> <b>the</b> relative running time <b>of</b> <b>the</b> <b>two</b> methods <b>is</b> developed <b>the</b> model aids <b>in</b> choosing <b>between</b> <b>the</b> <b>two</b> simulation methods for <b>a</b> <b>particular</b> experiment it <b>is</b> concluded <b>that</b> <b>the</b> significant event method can 
cacm-1602 : <b>a</b> computer <b>a</b> language pose <b>is</b> described which <b>is</b> <b>a</b> drastic departure from <b>the</b> fortran/algol <b>type</b> though it does utilize 
cacm-1719 : <b>and</b> industry <b>of</b> <b>the</b> criteria for <b>and</b> methods <b>of</b> calculating <b>and</b> optimizing <b>data</b> processing <b>system</b> cost <b>and</b> performance real-time <b>data</b> processing systems <b>as</b> typified by <b>the</b> automated airline reservation <b>system</b> <b>are</b> discussed <b>in</b> this paper criteria for 
cacm-1768 : <b>any</b> sentence <b>in</b> <b>the</b> language or indicate <b>that</b> <b>the</b> given sentence <b>is</b> invalid <b>is</b> described <b>the</b> parser <b>is</b> <b>of</b> <b>the</b> top-to-bottom <b>type</b> <b>and</b> <b>is</b> recursive <b>a</b> number <b>of</b> heuristic procedures whose purpose 
cacm-3048 : performance evaluation without <b>the</b> necessity <b>of</b> emulating <b>the</b> <b>system</b> <b>as</b> <b>a</b> case study <b>the</b> implementation <b>of</b> <b>a</b> simulator <b>of</b> <b>a</b> model <b>of</b> <b>the</b> cpu-memory subsystem <b>of</b> <b>the</b> ibm 360/91 <b>is</b> described <b>the</b> results <b>of</b> evaluating <b>some</b> alternative <b>system</b> designs <b>are</b> discussed <b>the</b> experiments reveal <b>that</b> for <b>the</b> case study <b>the</b> major bottlenecks <b>in</b> <b>the</b> <b>system</b> <b>are</b> <b>the</b> memory unit <b>and</b> <b>the</b> fixed point unit further 
cacm-3153 : <b>of</b> jobs <b>is</b> studied <b>to</b> determine optimal degrees <b>of</b> multiprogramming <b>and</b> <b>the</b> proportion <b>of</b> processor time devoted <b>to</b> each class applying <b>a</b> decomposition approach <b>and</b> <b>treating</b> <b>the</b> closed <b>system</b> <b>as</b> <b>a</b> single server <b>the</b> response times <b>in</b> an open <b>system</b> with external arrivals <b>are</b> studied <b>the</b> object <b>is</b> <b>to</b> investigate <b>the</b> effect <b>of</b> <b>the</b> memory alocation parameters on 
cacm-1181 : <b>a</b> simple <b>data</b> transmission <b>system</b> using <b>the</b> office telephone <b>a</b> method has evolved for 
cacm-2218 : indication <b>of</b> <b>the</b> effectiveness <b>of</b> this <b>type</b> <b>of</b> organization <b>in</b> <b>a</b> time-sharing environment <b>the</b> design characteristics <b>and</b> operational capabilities <b>of</b> <b>the</b> simulation model <b>are</b> also described cacm february 
cacm-2864 : <b>in</b> terms <b>of</b> its residence <b>in</b> localities <b>of</b> various sizes <b>and</b> lifetimes <b>and</b> <b>the</b> transitions <b>between</b> these localities <b>in</b> this paper <b>the</b> concept <b>of</b> <b>a</b> locality <b>is</b> made more explicit through 
cacm-3128 : mutual exclusion <b>to</b> protect manipulations <b>of</b> shared variables <b>that</b> control ordering <b>of</b> events direct control <b>of</b> ordering seems <b>to</b> simplify correctness arguments <b>and</b> also simplifies implementation <b>in</b> distributed systems <b>the</b> mechanism <b>is</b> defined formally <b>and</b> then several examples <b>of</b> its use <b>are</b> given <b>the</b> <b>relationship</b> <b>of</b> <b>the</b> mechanism <b>to</b> protection mechanisms <b>in</b> <b>the</b> <b>system</b> <b>is</b> explained <b>in</b> <b>particular</b> eventcounts <b>are</b> shown <b>to</b> be applicable <b>to</b> situations where confinement <b>of</b> information matters an implementation 
cacm-1426 : policies <b>of</b> <b>a</b> large specialized hospital <b>the</b> objective <b>is</b> <b>to</b> determine better policies for 
cacm-2184 : on <b>the</b> meaning <b>of</b> names <b>in</b> programming systems it <b>is</b> assumed <b>that</b> <b>there</b> <b>is</b> <b>a</b> similarity <b>of</b> function <b>between</b> <b>the</b> <b>data</b> names <b>of</b> <b>a</b> programming language <b>and</b> <b>the</b> file names <b>of</b> an operating <b>system</b> <b>the</b> <b>two</b> functions <b>are</b> discussed <b>in</b> terms <b>of</b> <b>the</b> same basic concepts <b>in</b> order <b>to</b> identify <b>the</b> extent <b>to</b> which they overlap it 
cacm-2632 : including <b>the</b> creation <b>of</b> new <b>types</b> specification <b>of</b> new operations applicable <b>to</b> <b>a</b> given <b>type</b> sharing <b>and</b> protection <b>of</b> <b>any</b> reference <b>to</b> <b>a</b> given object against improper 
cacm-1491 : <b>is</b> developed which introduces <b>a</b> rigorous <b>relationship</b> <b>between</b> structure <b>and</b> meaning <b>the</b> structure <b>of</b> <b>a</b> language <b>is</b> defined by <b>a</b> phrase structure syntax <b>the</b> meaning <b>in</b> terms <b>of</b> <b>the</b> effects which <b>the</b> execution <b>of</b> <b>a</b> sequence <b>of</b> interpretation rules exerts upon 
cacm-2527 : from one <b>type</b> <b>to</b> another checks subscripts <b>and</b> automatically detects many <b>types</b> <b>of</b> programmer errors cacm april 
cacm-1976 : values redundancy <b>in</b> <b>some</b> cases <b>is</b> <b>the</b> same <b>as</b> <b>the</b> secondary indexing method <b>in</b> <b>the</b> general case trade-off <b>between</b> <b>the</b> number <b>of</b> accesses for query <b>and</b> redundancy exists cacm november 
cacm-2342 : individual <b>processes</b> operate <b>the</b> formation <b>of</b> partial rules <b>and</b> <b>the</b> calculation <b>of</b> transition rules <b>are</b> <b>both</b> applicable <b>to</b> hardware <b>processes</b> <b>as</b> well <b>as</b> <b>to</b> software <b>processes</b> <b>and</b> symmetry <b>between</b> <b>processes</b> <b>is</b> not required cacm june 
cacm-2178 : <b>in</b> <b>a</b> host language emphasis <b>is</b> placed <b>both</b> on graspe itself <b>and</b> on its method <b>of</b> definition commonly <b>the</b> definition <b>of</b> <b>a</b> language involves definition <b>of</b> <b>the</b> syntactic elements <b>and</b> explanation <b>of</b> <b>the</b> meaning <b>to</b> be assigned them <b>the</b> semantics <b>the</b> definition <b>of</b> graspe here <b>is</b> solely <b>in</b> terms <b>of</b> its semantics <b>that</b> <b>is</b> <b>the</b> <b>data</b> structures <b>and</b> operations <b>are</b> defined precisely but without 
cacm-2289 : logic <b>a</b> major challenge <b>in</b> <b>the</b> effective use <b>of</b> cellular arrays for <b>the</b> solution <b>of</b> graph problems <b>is</b> <b>the</b> determination <b>of</b> algorithms <b>that</b> exploit <b>the</b> possibilities for parallelism especially 
cacm-1589 : <b>the</b> online situation <b>the</b> processor interacts with <b>the</b> graphical keyboard on <b>a</b> character-by-character basis so <b>as</b> <b>to</b> restrict <b>the</b> programmers choice <b>of</b> input symbols <b>to</b> those which <b>are</b> syntactically correct dialog has 
cacm-1844 : users <b>in</b> <b>a</b> simple manner <b>the</b> ratio <b>of</b> users <b>to</b> computers <b>is</b> dependent on <b>both</b> <b>the</b> size <b>and</b> power <b>of</b> <b>the</b> machines used <b>and</b> <b>the</b> computation requirements <b>of</b> <b>the</b> <b>particular</b> mix <b>of</b> users this <b>system</b> organization <b>is</b> inherently <b>a</b> simpler <b>and</b> therefore more reliable approach 
cacm-1698 : <b>in</b> multiuser computers <b>the</b> ability <b>of</b> <b>a</b> computer <b>system</b> <b>to</b> communicate with <b>the</b> outside world efficiently <b>is</b> <b>as</b> important <b>as</b> its ability <b>to</b> perform computations efficiently it 
cacm-2956 : <b>some</b> ideas on <b>data</b> <b>types</b> <b>in</b> high-level languages <b>a</b> number <b>of</b> issues <b>are</b> explored concerning <b>the</b> <b>notion</b> <b>that</b> <b>a</b> <b>data</b> <b>type</b> <b>is</b> <b>a</b> set <b>of</b> values together with <b>a</b> set <b>of</b> primitive operations on those 
cacm-2167 : algebraic simplification <b>a</b> guide for <b>the</b> perplexed algebraic simplification <b>is</b> examined first from <b>the</b> point <b>of</b> view <b>of</b> <b>a</b> user who needs <b>to</b> comprehend <b>a</b> large expression <b>and</b> second from <b>the</b> point <b>of</b> view <b>of</b> <b>a</b> designer who wants <b>to</b> construct <b>a</b> useful <b>and</b> efficient <b>system</b> first we describe various 
cacm-1591 : <b>the</b> implications <b>of</b> <b>a</b> teaching <b>system</b> with this degree <b>of</b> flexibility for industrial <b>and</b> executive training <b>as</b> well <b>as</b> academic education <b>are</b> discussed <b>in</b> addition <b>the</b> advantages <b>of</b> this <b>type</b> <b>of</b> <b>system</b> for computer programming <b>and</b> operation <b>are</b> also considered cacm june 
cacm-1614 : <b>any</b> block heading <b>and</b> terminate with <b>the</b> block they <b>are</b> an integral part <b>of</b> <b>the</b> program <b>and</b> <b>are</b> not fixed <b>in</b> <b>the</b> language even <b>the</b> behavior <b>of</b> existing operators may be 
cacm-2850 : <b>a</b> program verifier <b>a</b> brief discussion <b>of</b> <b>the</b> <b>relationship</b> <b>between</b> symbolic execution <b>and</b> program proving <b>is</b> also included cacm july 
cacm-2957 : <b>relationship</b> <b>between</b> objects into <b>a</b> higher-level object <b>a</b> new <b>data</b> <b>type</b> called aggregation <b>is</b> developed which under certain 
cacm-2033 : computational factors <b>a</b> given set <b>of</b> messages <b>two</b> new hash-coding methods <b>are</b> examined <b>and</b> compared with <b>a</b> <b>particular</b> conventional hash-coding method <b>the</b> computational factors considered <b>are</b> <b>the</b> size <b>of</b> <b>the</b> hash area space <b>the</b> time required <b>to</b> identify <b>a</b> <b>message</b> <b>as</b> <b>a</b> nonmember <b>of</b> <b>the</b> given set reject time 
cacm-1827 : for <b>the</b> purpose <b>of</b> monitoring operating <b>system</b> <b>and</b> user program behavior <b>and</b> performance <b>the</b> overall structure <b>of</b> mts <b>is</b> outlined <b>in</b> order <b>to</b> explain <b>the</b> implementation <b>of</b> <b>the</b> dcf events <b>in</b> <b>the</b> <b>system</b> <b>are</b> identified <b>and</b> recorded from within <b>the</b> supervisor <b>and</b> dumped <b>to</b> magnetic tape by an 
cacm-1143 : best <b>to</b> select <b>a</b> uniform technique <b>both</b> for running <b>the</b> experiments <b>and</b> for analyzing <b>the</b> <b>data</b> <b>and</b> then <b>to</b> consider <b>as</b> significant only relative results 
cacm-2911 : considerably <b>and</b> <b>in</b> <b>both</b> directions from <b>the</b> predictions <b>of</b> <b>the</b> 50 percent rule <b>a</b> new derivation <b>is</b> given <b>and</b> it <b>is</b> shown <b>that</b> previous derivations make an 
cacm-1455 : generalization <b>to</b> character strings <b>of</b> <b>the</b> programming concept <b>of</b> <b>the</b> macro through <b>the</b> ability <b>of</b> trac <b>to</b> accept <b>and</b> store definitions <b>of</b> procedures <b>the</b> capabilities <b>of</b> <b>the</b> language can be indefinitely 
cacm-3164 : process <b>is</b> important <b>in</b> certain areas <b>of</b> database implementation <b>in</b> which <b>there</b> <b>are</b> constraints on <b>the</b> permissible sequences <b>of</b> actions <b>two</b> pad algorithms <b>are</b> presented one uses <b>a</b> simple path matrix representation 
cacm-2631 : retrieval namely <b>the</b> maintenance <b>and</b> use <b>of</b> large dictionaries <b>the</b> greater part <b>of</b> which <b>is</b> used only infrequently <b>a</b> novel method <b>is</b> presented which maps <b>the</b> hyperbolic frequency distribution this 
cacm-2851 : <b>are</b> presented <b>in</b> which <b>the</b> induction principle <b>is</b> used <b>to</b> demonstrate proofs <b>of</b> mutual exclusion it <b>is</b> shown <b>that</b> assertions-oriented proof methods <b>are</b> special cases <b>of</b> <b>the</b> induction principle <b>a</b> special case <b>of</b> <b>the</b> assertions method which <b>is</b> called parallel place assertions 
